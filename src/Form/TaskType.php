<?php

namespace App\Form;


use App\Entity\Task;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\OptionsResolver\OptionsResolver;

class TaskType extends AbstractType
{

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        //parent::buildForm($builder, $options);
        $builder
            ->add('name', TextType::class, [
                'label'=>'Nom'
            ])

            ->add('description', TextareaType::class,[
                'label'=> 'description',
                'required'=>false
            ])

            ->add('dueDate', DateTimeType::class, [
                'label'=> 'Date d\'échéance',
                'required' => false,
                'widget'=> 'single_text', //contruit moi un seul champs tous par la datime
                 'attr'=> [
                     'class'=> 'form-control input-inline datetimepicker', //La class datetime me permettra de le cibler en js
                     'html5'=>false ,// N'utilise pas les options de html5 pour faire le rendu
                 ]

            ])

            ->add('reminder', NumberType::class, [
                'label'=> 'Date de rappel',
                'required' => false
            ]);



        //Envenement formulaire
        $builder->addEventListener(FormEvents::POST_SET_DATA, function (FormEvent $event){
            $task = $event->getData();
            $form = $event->getForm();

            if (!empty($task->getId())){

                $form->add('done', CheckboxType::class ,[
                    'required'=>false
                ]);


                $form->add('VALIDER' , SubmitType::class,[
                   'attr'=>[
                       'class'=> 'btn btn-warning btn-lg btn-block',
                       'style'=> 'color:whiteSmoke; text-transform: uppercase'
                   ]

                ]);

            }else{

                $form->add('J\'ENREGISTRER', SubmitType::class, [
                    'attr'=>[
                        'class'=> 'btn btn-primary btn-lg btn-block',
                        'style'=> 'background-color:#5060dc; text-transform: uppercase'
                    ]
                ]);
            }

        });
    }





    public function configureOptions(OptionsResolver $resolver)
    {
       // parent::configureOptions($resolver); // TODO: Change the autogenerated stub

        $resolver->setDefaults([
           'data_class'=> Task::class  //Fait en sorte de preciser la class  de l'objet auxauel il fait reference , meme si par défault il le fait
        ]);
    }

}